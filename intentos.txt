package pe.gob.sunat.contribuyentems2.servicio.cpe.consulta.nfs.backend.ws.rest;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import org.springframework.core.io.Resource;
import org.apache.http.HttpStatus;
import org.drools.io.ByteArrayResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import jakarta.websocket.server.PathParam;

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;

import pe.gob.sunat.contribuyentems2.servicio.cpe.consulta.nfs.backend.domain.T4241cabcpe;
import pe.gob.sunat.contribuyentems2.servicio.cpe.consulta.nfs.backend.domain.T4241cabcpePK;
import pe.gob.sunat.contribuyentems2.servicio.cpe.consulta.nfs.backend.repository.informix.T4241cabcpeRepository;

@RestController
@RequestMapping(value = "/nfs")
public class NFSRestService {
	@GetMapping(value = "/message")
	public ResponseEntity showMessage() {
		return ResponseEntity.ok().body("HELLO DEMO DESPLIEGUE...");
	}

	@GetMapping(value = "/message/{mimensaje}")
	public ResponseEntity showMessage(@PathVariable("mimensaje") String mimensaje ) {
		return ResponseEntity.ok().body("Hola Mundo, este es mi mensaje : " + mimensaje );
	}
	
	
	 @Autowired
	 private T4241cabcpeRepository repository; 
   
	 @GetMapping("/datos/{numRuc}/{codCpe}/{numSerieCpe}/{numCpe}")
	 public T4241cabcpe getDatos(@PathVariable String numRuc,
	                             @PathVariable String codCpe,
	                             @PathVariable String numSerieCpe,
	                             @PathVariable Integer numCpe) {
	        T4241cabcpePK pk = new T4241cabcpePK();
	        
	        pk.setNumRuc(numRuc);
	        pk.setCodCpe(codCpe);
	        pk.setNumSerieCpe(numSerieCpe);
	        pk.setNumCpe(numCpe);
	        return repository.findById(pk).orElse(null);
	    }
	 
	 @GetMapping("/datosf/{numRuc}/{codCpe}/{numSerieCpe}/{numCpe}/{tipoArchivo}")
	    public String getDatosf(@PathVariable String numRuc,
	                                @PathVariable String codCpe,
	                                @PathVariable String numSerieCpe,
	                                @PathVariable Integer numCpe,
	                                @PathVariable String tipoArchivo) {
	        T4241cabcpePK pk = new T4241cabcpePK();
	        pk.setNumRuc(numRuc);
	        pk.setCodCpe(codCpe);
	        pk.setNumSerieCpe(numSerieCpe);
	        pk.setNumCpe(numCpe);
	        String resultado="";
	        try {
	            T4241cabcpe regi = repository.findById(pk).orElseThrow(() -> new Exception("No se encontró ningún registro con el ID proporcionado"));
	            char ultimoCaracter = numRuc.charAt(numRuc.length() - 1);
		        
		        Calendar calendario = Calendar.getInstance();
		        calendario.setTime(regi.getFecEmision());
		        
		        String año = String.valueOf(calendario.get(Calendar.YEAR));
		        String mes = String.format("%02d", calendario.get(Calendar.MONTH) + 1); 
		        String dia = String.format("%02d", calendario.get(Calendar.DAY_OF_MONTH));
		        String hora = String.format("%02d", calendario.get(Calendar.HOUR_OF_DAY));
		        String ruta="";
		        if (tipoArchivo.equals("XML") || tipoArchivo.equals("xml")) {
		        	ruta = "D:\\data0\\NFS\\"+año+"\\"+mes+"\\"+dia+"\\"+hora+"\\"+ultimoCaracter+"\\"+codCpe+"\\0";
		        } 
		        if (tipoArchivo.equals("CDR") || tipoArchivo.equals("cdr")) {
		        	ruta = "D:\\data0\\NFS\\"+año+"\\"+mes+"\\"+dia+"\\"+hora+"\\"+ultimoCaracter+"\\"+codCpe+"\\1";
		        } 
		        File directorio = new File(ruta);
		        if (!directorio.exists()) {
		            resultado= "El directorio especificado no existe.";    
		        }
		        else
		        {
		        	File[] archivos = directorio.listFiles();
		        
		        	File archivo = new File(ruta);
		        
		        	if (archivo.exists()) {
		        		resultado= "Archivo: "+ archivos[0].getName()+ " existe en la ruta : "+ ruta;
			        	} else {
			        		resultado= "El archivo no existe en el directorio "+ archivo;
			        	}
		      
		        }
	            
	        } catch (Exception e) {
	            resultado="No se encontro datos en la BD";
	            //e.printStackTrace(); 
	            
	        }
	         
	        return resultado;
	       
	    } 
	 	 
	@GetMapping("/datosff/{rutaArchivo}/{nombreArchivo}")
	public String jalaArchivoff(@PathVariable String rutaArchivo, @PathVariable String nombreArchivo) {
		 String resultado = rutaArchivo+ "\\" + nombreArchivo;	 
	return resultado;	 }
	
	@GetMapping("/datosgg")
	public String jalaArchivogg(@RequestParam String rutaArchivo, @RequestParam String nombreArchivo) {
		String rutaCompleta=rutaArchivo+"\\"+nombreArchivo; 
		String resultado="";
		 File directorio = new File(rutaCompleta);
	        if (!directorio.exists()) {
	            resultado= "El directorio especificado no existe." + directorio;    
	        } 
	        else
	        {
	        	resultado= "El directorio especificado si existe." + directorio;   
	        }
		 
		 
	return resultado;	
	
	 }
	
	
	
	@GetMapping("/datoshh")
	public String jalaArchivohh(@RequestParam String rutaArchivo, @RequestParam String nombreArchivo) {
		String rutaCompleta=rutaArchivo+"\\"+nombreArchivo; 
		String resultado="";
		File directorio = new File(rutaCompleta);
	    if (!directorio.exists()) {
	        resultado= "El directorio especificado no existe." + directorio;    
	    } 
	    else
	    {
	    	resultado= "El directorio especificado si existe." + directorio;   
	     }
		
	return resultado;	
	
	 }
	
    

    
    @GetMapping("/leerArchivo")
    public ResponseEntity<String> leerArchivo(
            @RequestParam String filePath,
            @RequestParam String fileName
    ) {
        String contenido = obtenerContenido(filePath, fileName);
        if (contenido != null) {
            return ResponseEntity.ok(contenido);
        } else {
            return ResponseEntity.status(HttpStatus.SC_INTERNAL_SERVER_ERROR)
                    .body("No se pudo leer el archivo.");
        }
    }

    private String obtenerContenido(String filePath, String fileName) {
        StringBuilder contenido = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath + "\\" + fileName))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                contenido.append(linea).append("\n");
            }
            return contenido.toString();
        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
            return null;
        }
    }
	
    @GetMapping("/descargarArchivo")
    public ResponseEntity<FileSystemResource> descargarArchivo(
            @RequestParam String filePath,
            @RequestParam String fileName
    ) {
        try {
            File file = new File(filePath + "\\" + fileName);
            if (!file.exists() || !file.isFile()) {
                return ResponseEntity.status(HttpStatus.SC_NOT_FOUND).body(null);
            }

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(new FileSystemResource(file));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).body(null);
        }
    }
    
    @GetMapping("/convierte")
    public ResponseEntity<String> downloadFile(
    		@RequestParam String filePath,
            @RequestParam String fileName
    ) {
    	String file = filePath + "\\" + fileName;
        try (FileInputStream fileInputStream = new FileInputStream(file);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int length;
            while ((length = fileInputStream.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, length);
            }

            // Convertir los bytes a Base64
            byte[] bytes = byteArrayOutputStream.toByteArray();
            String base64Encoded = Base64.getEncoder().encodeToString(bytes);
                    
                   

            return ResponseEntity.ok(base64Encoded);
            
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).body(null);
        	}
    	}
    
    
    @GetMapping("/descargaf")
    public ResponseEntity<ByteArrayResource> descargarArchivof(
            @RequestParam String filePath,
            @RequestParam String fileName
    ) {
    	File file = new File(filePath + "\\" + fileName);
        try {
            
            if (!file.exists() || !file.isFile()) {
                return ResponseEntity.status(HttpStatus.SC_NOT_FOUND).body(null);
                
            }
            FileInputStream fileInputStream = new FileInputStream(file);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

            byte[] buffer = new byte[1024];
            int length;
            while ((length = fileInputStream.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, length);
            }

            // Convertir los bytes a Base64
            byte[] bytes = byteArrayOutputStream.toByteArray();
            String base64Encoded = Base64.getEncoder().encodeToString(bytes);
            byte[] bytes2 = base64Encoded.getBytes();
            ByteArrayResource resource = new ByteArrayResource(bytes2); 
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", "archivo.txt");
            //headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(bytes.length)
                    .body(resource);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).body(null);
        }
    }
    
    
}
